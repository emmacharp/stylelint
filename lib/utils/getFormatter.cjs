// NOTICE: This file is generated by Rollup. To modify it,
// please instead edit the ESM counterpart and rebuild with Rollup (npm run build).
'use strict';

const constants = require('../constants.cjs');
const dynamicImport = require('./dynamicImport.cjs');
const fs = require('node:fs');
const index = require('../formatters/index.cjs');
const validateTypes = require('./validateTypes.cjs');
const process = require('node:process');
const path = require('node:path');
const resolveConfig = require('../resolveConfig.cjs');

/**
 * @param {import('stylelint').LinterOptions} options
 * @returns {Promise<import('stylelint').LinterOptions['formatter']>}
 */
async function getFormatter(options) {
	const cwd = process.cwd();
	const customFormatter = options.customFormatter;
	const configFile = options.config?.toString();
	const configBasedir = options.configBasedir;
	const resolvedConfig = (await resolveConfig(cwd, { configBasedir, configFile })) || {};
	const configFormatter = resolvedConfig.formatter;

	const configFormatterName = configFormatter?.toString();

	const cliConfigFlagExists = Object.prototype.hasOwnProperty.call(options, 'formatter');
	const configFormatterExists =
		configFormatterName && typeof configFormatter === 'string' && index[configFormatter];
	let formatter;

	if (validateTypes.isString(customFormatter)) {
		formatter = await importCustomFormatter(customFormatter);
	} else if (cliConfigFlagExists && validateTypes.isString(options.formatter)) {
		formatter = options.formatter;
	} else if (configFormatterName && !configFormatterExists) {
		formatter = await importCustomFormatter(configFormatterName);
	} else if (configFormatter) {
		formatter = configFormatter;
	} else {
		formatter = index[constants.DEFAULT_FORMATTER];
	}

	return formatter;
}

/**
 * @param {string} fileOrModulePath
 * @returns {Promise<import('stylelint').Formatter>}
 */
function importCustomFormatter(fileOrModulePath) {
	let modulePath = fileOrModulePath;

	if (fs.existsSync(modulePath)) {
		modulePath = path.resolve(modulePath); // to absolute path
	}

	return dynamicImport(modulePath).then((m) => m.default);
}

module.exports = getFormatter;
