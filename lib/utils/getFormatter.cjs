// NOTICE: This file is generated by Rollup. To modify it,
// please instead edit the ESM counterpart and rebuild with Rollup (npm run build).
'use strict';

const constants = require('../constants.cjs');
const index = require('../formatters/index.cjs');
const getConfigForFile = require('../getConfigForFile.cjs');
const getFormatterOptionsText = require('./getFormatterOptionsText.cjs');

/** @import {Formatter, InternalApi} from 'stylelint' */

/**
 * @param {InternalApi} stylelint
 * @returns {Promise<Formatter>}
 */
async function getFormatter(stylelint) {
	const cwd = stylelint._options.cwd;
	const configFile = stylelint._options.configFile;
	const resolvedConfig = await getConfigForFile(stylelint, cwd, configFile);
	const configFormatter = resolvedConfig?.config.formatter;
	/** @type {Formatter} */
	let formatter = stylelint._options.formatter || configFormatter;

	if (typeof formatter === 'string') {
		const formatterFunction = index[formatter];

		if (formatterFunction === undefined) {
			const formattersText = getFormatterOptionsText(', ', '"');

			throw new Error(`You must use a valid formatter option: ${formattersText} or a function`);
		}

		return formatterFunction;
	}

	if (typeof formatter === 'function') {
		return Promise.resolve(formatter);
	}

	return index[constants.DEFAULT_FORMATTER];
}

module.exports = getFormatter;
